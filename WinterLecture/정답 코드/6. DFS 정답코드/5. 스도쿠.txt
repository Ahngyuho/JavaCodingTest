import java.util.*;
class Solution {
	int[][] p, h, y, g, answer;
	int cnt = 0;
	boolean flag = false;
	public int find(int i, int j){
		return (i / 3) * 3 + (j / 3);
	}
	public void DFS(int L, int[][] board){
		if(flag) return;
		if(L == cnt){
			for(int i = 0; i < 9; i++){
				for(int j = 0; j < 9; j++){
					answer[i][j] = board[i][j];
				}
			}
			flag = true;
		}	
		else{
			int xx = p[0][L];
			int yy = p[1][L];
			int gg = find(xx, yy);
			for(int i = 1; i <= 9; i++){
				if(h[xx][i] == 0 && y[yy][i] == 0 && g[gg][i] == 0){
					h[xx][i] = y[yy][i] = g[gg][i] = 1;
					board[xx][yy] = i;
					DFS(L + 1, board);
					h[xx][i] = y[yy][i] = g[gg][i] = 0;
					board[xx][yy] = 0;
				}
			}
		}
	}
	public int[][] solution(int[][] board){
		p = new int[2][100];
		h = new int[10][10];
		y = new int[10][10];
		g = new int[10][10];
		answer = new int[9][9];
		for(int i = 0; i < 9; i++){
			for(int j = 0; j < 9; j++){
				if(board[i][j] == 0){
					p[0][cnt] = i;
					p[1][cnt++] = j;
				}
				else{
					h[i][board[i][j]] = 1;
					y[j][board[i][j]] = 1;
					g[find(i, j)][board[i][j]] = 1;
				}
			}
		}
		DFS(0, board);
		return answer;
	}

	public static void main(String[] args){
		Solution T = new Solution();
		for(int[] x :(T.solution(
			new int[][]{{0, 2, 3, 0, 5, 0, 7, 8, 9}, 
			{0, 5, 6, 0, 8, 9, 1, 0, 3}, 
			{0, 8, 9, 1, 0, 3, 0, 5, 6}, 
			{0, 1, 0, 0, 6, 0, 8, 9, 0}, 
			{3, 0, 5, 0, 9, 7, 0, 1, 4}, 
			{0, 9, 7, 0, 1, 0, 0, 6, 5}, 
			{5, 3, 0, 6, 0, 2, 9, 7, 8}, 
			{6, 0, 2, 9, 0, 8, 5, 3, 1}, 
			{9, 0, 8, 0, 3, 0, 6, 0, 2}}))){
			System.out.println(Arrays.toString(x));
		};		
	}
}