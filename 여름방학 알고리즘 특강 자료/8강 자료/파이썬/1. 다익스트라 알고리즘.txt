import collections, heapq
def solution(n, edges, e):
        
    answer=0
    graph=[[] for _ in range(n+1)]
    dist=[1000]*(n+1)
    rt=0
    for [a, b, c] in edges:
        graph[a].append([b, c])

    tree=[]
    heapq.heappush(tree, [0, 1])
    dist[1]=0
    while tree:
        nowcost, now = heapq.heappop(tree)

        if nowcost>dist[now]:
            continue
        for [nx, cost] in graph[now]:
            if nowcost+cost<dist[nx]:
                dist[nx]=nowcost+cost
                heapq.heappush(tree, [dist[nx], nx])
    if dist[e]==1000:
        answer=-1
    else:
        answer=dist[e]
    
    return answer;


print(solution(6, [[1, 2, 12], [1, 3, 4], [2, 1, 2], [2, 3, 5], [2, 5, 5], [3, 4 ,5], [4, 2, 2], [4, 5, 5], [6, 4, 5]], 2));







<최솟값을 O(n)으로 구하는 방법>
function solution(n, edges, end) {
  let answer = 0;
  let graph = Array.from(Array(n+1), () => Array());
  let dist = Array.from({length:n+1}, () => 1000);
  let ch = Array(n+1).fill(0);
  for(let [a, b, c] of edges){
      graph[a].push([b, c]);
  }
  dist[1] = 0;
  for(let i=1; i<=n; i++){
    let min=0;
    for(let j=1; j<=n; j++){
      if(ch[j]===0 && dist[j]<dist[min]) min=j;
    }
    ch[min]=1;
    for(let [next, cost] of graph[min]){
      if(dist[min]+cost < dist[next]){
        dist[next]=dist[min]+cost;
      }
    }
  }
  answer=dist[end];
  return answer;
}
console.log(solution(6, [[1, 2, 12], [1, 3, 4], [2, 1, 2], [2, 3, 5], [2, 5, 5], [3, 4 ,5], [4, 2, 2], [4, 5, 5], [6, 4, 5]], 5));












