import java.util.*;
class Edge implements Comparable<Edge>{
    public int vex;
	public int cost;
    Edge(int vex, int cost) {
        this.vex = vex;
        this.cost = cost;
    }
    @Override
    public int compareTo(Edge ob){
        return this.cost-ob.cost;
    }
}
class Solution {
    public int solution(int n, int[][] edge) {
        int answer=0;
        ArrayList<ArrayList<Integer>> graph=new ArrayList<>();
		for(int i=0; i<=n; i++){
			graph.add(new ArrayList<Integer>());
		}
		int[] dis=new int[n+1];
		Arrays.fill(dis, Integer.MAX_VALUE);
		for(int[] x : edge){
			graph.get(x[0]).add(x[1]);
            graph.get(x[1]).add(x[0]);
		}
		PriorityQueue<Edge> pQ = new PriorityQueue<>();
		pQ.offer(new Edge(1, 0));
		dis[1]=0;
        dis[0]=0;
		while(!pQ.isEmpty()){
			Edge tmp=pQ.poll();
			int now=tmp.vex;
			int nowCost=tmp.cost;
			if(nowCost>dis[now]) continue;
			for(int nv : graph.get(now)){
				if(dis[nv]>nowCost+1){
					dis[nv]=nowCost+1;
					pQ.offer(new Edge(nv, dis[nv]));
				}
			}
		}
        int maxd=0;
		for(int x : dis) maxd=Math.max(maxd, x);
        for(int x : dis){
            if(x==maxd) answer++;
        }
        return answer;
    }
}