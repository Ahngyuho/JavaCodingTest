import java.util.*;
class Edge implements Comparable<Edge>{
    public int vex;
	public int cost;
    Edge(int vex, int cost) {
        this.vex = vex;
        this.cost = cost;
    }
    @Override
    public int compareTo(Edge ob){
        return this.cost-ob.cost;
    }
}
class Main {
	public int solution(int n, int[][] edges, int end){
		ArrayList<ArrayList<Edge>> graph=new ArrayList<>();
		for(int i=0; i<=n; i++){
			graph.add(new ArrayList<Edge>());
		}
		int[] dis=new int[n+1];
		Arrays.fill(dis, Integer.MAX_VALUE);
		for(int[] x : edges){
			graph.get(x[0]).add(new Edge(x[1], x[2]));
		}
		PriorityQueue<Edge> pQ = new PriorityQueue<>();
		pQ.offer(new Edge(1, 0));
		dis[1]=0;
		while(!pQ.isEmpty()){
			Edge tmp=pQ.poll();
			int now=tmp.vex;
			int nowCost=tmp.cost;
			if(nowCost>dis[now]) continue;
			for(Edge ob : graph.get(now)){
				if(dis[ob.vex]>nowCost+ob.cost){
					dis[ob.vex]=nowCost+ob.cost;
					pQ.offer(new Edge(ob.vex, dis[ob.vex]));
				}
			}
		}
		return dis[end]==Integer.MAX_VALUE? -1 : dis[end];
	}
		
	public static void main(String[] args){
		Main T = new Main();
		System.out.println(T.solution(6, new int[][]{{1, 2, 12}, {1, 3, 4}, 
			{2, 1, 2}, {2, 3, 5}, {2, 5, 5}, {3, 4, 5}, {4, 2, 2}, {4, 5, 5}, {6, 4, 5}}, 5));
	}
}


